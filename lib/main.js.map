{"mappings":"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","sources":["src/main.ts"],"sourcesContent":["import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { execSync } from \"child_process\";\nimport cpx from \"cpx\";\nimport makeDir from \"make-dir\";\nimport { promisify } from \"util\";\n\nconst compare = require(\"reg-cli\");\nconst NodeZip = require(\"node-zip\");\n\nconst token = core.getInput(\"secret\");\n\nconst octokit = new github.GitHub(token);\nconst writeFileAsync = promisify(fs.writeFile);\n\nconst { repo } = github.context;\n\nlet event: any;\ntry {\n  if (process.env.GITHUB_EVENT_PATH) {\n    event = JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH, \"utf8\"));\n  }\n} catch (e) {}\n\nif (!event) {\n  throw new Error(\"Failed to get github event.json..\");\n}\n\nconst actual = core.getInput(\"actual-directory-path\");\n\n// TODO: fetch all run\nconst run = async () => {\n  const runs = await octokit.actions.listRepoWorkflowRuns({\n    ...repo,\n    per_page: 100,\n  });\n\n  const sha = event.after || event.pull_request?.head?.sha;\n\n  if (!sha) {\n    return;\n  }\n\n  const currentHash = sha.slice(0, 7);\n\n  const currentRun = runs.data.workflow_runs.find((run) =>\n    run.head_sha.startsWith(currentHash)\n  );\n\n  if (!currentRun) return;\n\n  cpx.copySync(\n    path.join(actual, `**/*.{png,jpg,jpeg,tiff,bmp,gif}`),\n    \"./__reg__/actual\"\n  );\n\n  // Not PR\n  if (typeof event.number === \"undefined\") {\n    return;\n  }\n\n  const targetHash = execSync(\n    `git merge-base -a origin/${event.pull_request.base.ref} origin/${event.pull_request.head.ref}`,\n    { encoding: \"utf8\" }\n  ).slice(0, 7);\n\n  const targetRun = runs.data.workflow_runs.find((run) =>\n    run.head_sha.startsWith(targetHash)\n  );\n\n  if (!targetRun) {\n    console.error(\"Failed to find target run\");\n    return;\n  }\n\n  // TODO: fetch all artifacts\n  const res = await octokit.actions.listWorkflowRunArtifacts({\n    ...repo,\n    run_id: targetRun.id,\n    per_page: 100,\n  });\n\n  // Octokit's type definition is wrong now.\n  const { artifacts } = res.data as any;\n  const latest = artifacts[artifacts.length - 1];\n\n  const zip = await octokit.actions.downloadArtifact({\n    ...repo,\n    artifact_id: latest.id,\n    archive_format: \"zip\",\n  });\n\n  const files = new NodeZip(zip.data, {\n    base64: false,\n    checkCRC32: true,\n  });\n\n  await Promise.all(\n    Object.keys(files.files)\n      .map((key) => files.files[key])\n      .filter((file) => !file.dir)\n      .map(async (file) => {\n        const f = path.join(\"__reg__\", \"expected\", path.basename(file.name));\n        await makeDir(path.dirname(f));\n        await writeFileAsync(f, str2ab(file._data));\n      })\n  );\n\n  const emitter = compare({\n    actualDir: \"./__reg__/actual\",\n    expectedDir: \"./__reg__/expected\",\n    diffDir: \"./__reg__/diff\",\n    json: \"./__reg__/0\",\n    update: false,\n    ignoreChange: true,\n    urlPrefix: \"\",\n  });\n\n  emitter.on(\n    \"compare\",\n    async (compareItem: { type: string; path: string }) => {}\n  );\n\n  emitter.on(\"complete\", async () => {\n    const [owner, repo] = event.repository.full_name.split(\"/\");\n    const url = `https://bokuweb.github.io/reg-action-report/?owner=${owner}&repository=${repo}&run_id=${currentRun.id}`;\n\n    await octokit.issues.createComment({\n      ...repo,\n      issue_number: event.number,\n      body: url,\n    });\n  });\n};\n\nrun();\n\nfunction str2ab(str: string) {\n  const array = new Uint8Array(str.length);\n  for (var i = 0; i < str.length; i++) {\n    array[i] = str.charCodeAt(i);\n  }\n  return array;\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}